require 'rails_helper'

# all tests besides the title tests were generated by chatgpt for the following prompt:
# "Can you help me write tests for if I had an author, price, and date attached to each book? 
# I need a model and system test for each one, and each of those tests should have a rainy 
# and a sunny day case. (just like the book tests tested a valid book title and an invalid book title)"

RSpec.describe "Books", type: :system do
  before do
    driven_by(:rack_test)
  end

  # --- Title ---
  it 'creates a book with a title' do
    visit new_book_path

    fill_in 'Title', with: 'Brand New Book'
    fill_in 'Author', with: 'Some Author'
    fill_in 'Price', with: '19.99'
    fill_in 'Published date', with: Date.today
    click_on 'Create Book'

    expect(page).to have_content('Book was successfully created.')
    expect(page).to have_content('Brand New Book')
  end

  it 'does not create a book without a title' do
    visit new_book_path

    fill_in 'Title', with: ''
    fill_in 'Author', with: 'Some Author'
    fill_in 'Price', with: '19.99'
    fill_in 'Published date', with: Date.today
    click_on 'Create Book'

    expect(page).to have_content('Title can\'t be blank')
  end

  # --- Author ---
  it "creates a book with an author" do
    visit new_book_path

    fill_in "Title", with: "Book with Author"
    fill_in "Author", with: "Jane Doe"
    fill_in "Price", with: "12.99"
    fill_in "Published date", with: Date.today

    click_on "Create Book"

    expect(page).to have_content("Book was successfully created.")
    expect(page).to have_content("Jane Doe")
  end

  it "does not create a book without an author" do
    visit new_book_path

    fill_in "Title", with: "Book with Missing Author"
    fill_in "Price", with: "12.99"
    fill_in "Published date", with: Date.today

    click_on "Create Book"

    expect(page).to have_content("Author can't be blank")
  end

  # --- Price ---
  it "creates a book with a valid price" do
    visit new_book_path

    fill_in "Title", with: "Priced Book"
    fill_in "Author", with: "Author"
    fill_in "Price", with: "20.00"
    fill_in "Published date", with: Date.today

    click_on "Create Book"

    expect(page).to have_content("Book was successfully created.")
    expect(page).to have_content("20.0") # Adjust if formatted differently
  end

  it "does not create a book with a negative price" do
    visit new_book_path

    fill_in "Title", with: "Negative Price Book"
    fill_in "Author", with: "Author"
    fill_in "Price", with: "-5"
    fill_in "Published date", with: Date.today

    click_on "Create Book"

    expect(page).to have_content("Price must be greater than or equal to 0")
  end

  # --- Published date ---
  it "creates a book with a published date" do
    visit new_book_path

    fill_in "Title", with: "Dated Book"
    fill_in "Author", with: "Author"
    fill_in "Price", with: "15.00"
    fill_in "Published date", with: Date.today

    click_on "Create Book"

    expect(page).to have_content("Book was successfully created.")
    expect(page).to have_content(Date.today.to_s)
  end

  it "does not create a book without a published date" do
    visit new_book_path

    fill_in "Title", with: "No Date Book"
    fill_in "Author", with: "Author"
    fill_in "Price", with: "15.00"

    click_on "Create Book"

    expect(page).to have_content("Published date can't be blank")
  end
end
